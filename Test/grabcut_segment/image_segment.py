# -*- coding: utf-8 -*-
"""
Main Resources:

https://github.com/opencv/opencv/issues/18120
https://stackoverflow.com/questions/9868963/cvimwrite-could-not-find-a-writer-for-the-specified-extension
https://pyimagesearch.com/2020/07/27/opencv-grabcut-foreground-segmentation-and-extraction/
https://www.geeksforgeeks.org/python-opencv-cv2-imwrite-method/

This file contains test code that runs the GrabCut algorithm on a sample image. Later it will include testing for robustness.
"""

import cv2
import os
import time
import argparse
import logging
import numpy as np

ap = argparse.ArgumentParser()
ap.add_argument("--image", type=str,
	default="Media/Images/original_leg_day/FLIR_20220906_102026_232-Visual.jpeg",
	help="path to input image that we'll apply GrabCut to")
ap.add_argument("--folderout", type=str,
	default="Media/Computed_Media/image_segmentation/robustness_testing/image.png",
	help="path to saved output image")
ap.add_argument("-c", "--iter", type=int, default=10,
	help="# of GrabCut iterations (larger value => slower runtime)")
ap.add_argument("--x", type=int, default=246,)
ap.add_argument("--y", type=int, default=200,)
ap.add_argument("--w", type=int, default=700,)
ap.add_argument("--h", type=int, default=1330,)
args = vars(ap.parse_args())
print("Arguments: ", args)

image = cv2.imread(args["image"])
mask = np.zeros(image.shape[:2], dtype="uint8")

# Define bounding box
rect = (args['x'], args['y'], args['w'], args['h'])
print("Bounding box: ", rect)

# allocate memory for two arrays that the GrabCut algorithm internally
# uses when segmenting the foreground from the background
fgModel = np.zeros((1, 65), dtype="float")
bgModel = np.zeros((1, 65), dtype="float")

# apply GrabCut using the the bounding box segmentation method
print("Starting GrabCut routine")
start = time.time()
(mask, bgModel, fgModel) = cv2.grabCut(image, mask, rect, bgModel,
	fgModel, iterCount=args["iter"], mode=cv2.GC_INIT_WITH_RECT)
end = time.time()
print("[INFO] applying GrabCut took {:.2f} seconds".format(end - start))

# the output mask has for possible output values, marking each pixel
# in the mask as (1) definite background, (2) definite foreground,
# (3) probable background, and (4) probable foreground
values = (
	("Definite Background", cv2.GC_BGD),
	("Probable Background", cv2.GC_PR_BGD),
	("Definite Foreground", cv2.GC_FGD),
	("Probable Foreground", cv2.GC_PR_FGD),
)

# we'll set all definite background and probable background pixels
# to 0 while definite foreground and probable foreground pixels are
# set to 1
outputMask = np.where((mask == cv2.GC_BGD) | (mask == cv2.GC_PR_BGD),
	0, 1)
# scale the mask from the range [0, 1] to [0, 255]
outputMask = (outputMask * 255).astype("uint8")
# apply a bitwise AND to the image using our mask generated by
# GrabCut to generate our final output image
output = cv2.bitwise_and(image, image, mask=outputMask)

"""Write Files to Folder"""

# Save the output image to Computed Media folder
saved = cv2.imwrite(args["folderout"], output)
if not saved:
    logging.error('Image was NOT saved')
else:
    print("Image was successfully saved")